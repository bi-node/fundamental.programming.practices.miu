package medium;
/*ou are given an integer array nums and a positive integer k.Return the number of subarrays where
 *  the maximum element of nums appears at least k times in that subarray. A subarray is a contiguous
 *   sequence of elements within an array.
Example 1:

Input: nums = [1,3,2,3,3], k = 2 Output: 6  Explanation: The subarrays that contain the element 3 
at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].

*/

public class CountSubarrays {
	public static void main(String[] args) {
		int[] a = { 1, 3, 2, 3, 3 };
		int k = 2;
		System.out.println(countSubarrays(a, k));

	}

	public static long countSubarrays(int[] nums, int k) {
		int max = nums[0];
		for (int i = 1; i < nums.length; i++) {
			if (nums[i] > max)
				max = nums[i];
		}

		int len = nums.length; // sliding window algorigthm to go througth all sub array of at least size (k)
		for (int i = len - 1; i >= k - 1; i++) {
			for (int j = i; j < len; j++) {

			}
		}
return 1;
	}
}
	
	//private method to find frequencty
	private int findfrequency(int[] arr, int lb, int ub, )
	{
		
	}

}
