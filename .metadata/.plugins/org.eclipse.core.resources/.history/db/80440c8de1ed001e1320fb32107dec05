package medium;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

/*ou are given an integer array nums and a positive integer k.Return the number of subarrays where
 *  the maximum element of nums appears at least k times in that subarray. A subarray is a contiguous
 *   sequence of elements within an array.
Example 1:

Input: nums = [1,3,2,3,3], k = 2 Output: 6  Explanation: The subarrays that contain the element 3 
at least 2 times are: [1,3,2,3], [1,3,2,3,3], [3,2,3], [3,2,3,3], [2,3,3] and [3,3].

*/

public class CountSubarrays {
	public static void main(String[] args) {
		int[] a = { 283,891,1052,1077,658,894,73,441,927,374,781,913,420,1015,287,587,909,1077,1077,285,1077,831,80,332,1077,468,271,947,1077,1077,507,91,23,861,655,1077,712,1077,132,634,472,676,1077,7,82,898,1070,4,1077,388,114,388,261,1077,543,279,805,489,1003,1038,635,451,638,934,70,204,683,496,65,594,303,615,307,651,1077,554,41,227,442,329,1077,888,880,1077,176,1077,806,133,510,827,140,1077,438,734,852,400,373,590,727,456,1011,1015,6,49,1035,1077,1077,981,122,707,599,631,38,1045,1077,1077,1040,1077,331,814,331,597,972,1077,558,1077,1042,629,77,114,1077,169,370,1077,612,1077,1077,610,631,1077,563,700,905,1077,1055,422,608,578,804,905,897,883,79,1040,102,426,1077,621,736,641,1077,440,351,478,259,798,335,1077,263,805,931,762,747,344,845,393,1018,1077,279,1077,73,1077,817,970,613,870,1077,230,52,529,408,746,206,589,1055,209,728,673,236,773,835,78,414,779,1077,349,1077,764,65,798,992,1077,965,97,250,69,1077,1077,1077,1077,508,985,231,1077,1077,798,863,267,727,341,785,514,1077,1046,996,930,740,1077,1077,1077,646,1077,839,1077,1077,848,593,633,192,1077,1077,1077,445,81,918,369,177,354,681,1077,605,331,774,4,1077,443,1077,1077,126,1062,928,1077,75,1077,780,603,875,257,535,1077,858,1020,901,524,228,841,1077,537,502,198,1077,770,964,1077,1077,1077,893,710,773,274,1049,472,901,1077,1072,1077,223,499,1045,170,1077,407,380,656,576,603,886,1077,942,591,674,1066,1077,458,207,1077,309,912,766,836,898,445,995,1077,1070,1077,79,1077,87,1077,877,564,701,1077,1077,646,596,52,148,713,920,1077,48,225,127,113,198,649,1077,676,295,100,1077,934,395,389,1077,1077,1077,752,1077,1077,693,702,1077,395,905,351,1077,727,870,141,863,80,758,9,1077,736,1060,152,657,341,918,1039,492,1,683,743,355,277,1077,808,796,981,404,775,1077,364,924,975,812,550,889,1077,854,859,427,1077,1077,270,1077,1077,152,1077,645,1077,789,543,1067,1077,335,427,117,17,842,990,143,351,976,236,586,1077,673,340,1013,5,1077,493,1051,25,63,1077,397,318,1077,594,31,391,186,656,598,616,907,1077,924,640,707,793,1077,665,1077,199,90,607,508,1077,971,1057,547,1061,1077,516,94,1077,1077,106,868,783,845,1077,519,662,812,18,934,333,430,748,831,1001,1030,305,912,199,493,807,922,919,921,125,834,386,852,1077,463,754,909,337,1077,1077,326,759,818,259,1077,1077,592,881,24,500,1077,922,585,1068,462,1077,596,1077,959,134,339,1077,494,637,890,7,1077,429,1077,1077,567,1077,1077,1077,20,977,960,846,146,1077,372,625,352,1077,991,232,926,878,928,1074,1077,1053,971,1077,82,1060,435,212,498,48,1077,876,1077,1077,636,95,387,622,1077,1077,961,1077,1077,7,608,1077,901,86,927,772,662,1052,784,1077,599,318,738,140,1077,758,455,169,295,302,950,1020,683,1077,696,931,808,330,219,410,181,592,126,1077,563,395,1077,913,1077,717,1077,71,1077,1077,960,761,355,1077,1077,717,428,1077,1077,520,1077,376,1006,316,45,290,471,1042,399,1077,168,1077,499,922,1077,562,1067,240,1077,86,396,336,898,545,399,1001,917,534,955,779,644,1047,895,53,1077,1077,265,689,1077,79,81,1077,415,775,405,421,1077,226,542,728,1077,1077,1077,1077,457,751,497,755,460,694,714,1077,742,1047,721,873,370,326,683,81,602,1077,1077,976,1077,984,1077,1077,832,1077,1077,657,1077,518,104,1077,1041,704,1077,1077,566,735,328,773,489,1077,1077,1029,562,629,492,548,744,5,627,910,674,374,1077,466,881,372,386,976,302,19,307,161,623,1077,273,488,1077,487,1077,1024,949,805,274,1077,726,1077,1077,1077,1077,410,240,155,262,809,745,1077,1033,1077,306,641,1077,1077,272,225,209,654,235,127,963,546,799,554,553,1077,335,81,449,1077,1077,553,103,980,560,1077,687,915,352,734,571,819,898,1077,525,1077,41,1077,1077,783,714,941,847,950,978,974,598,627,1077,862,435,1077,112,736,713,1077,260,764,306,329,40,784,315,603,1077,905 };
		int k = 190;
		CountSubarrays cs=new CountSubarrays();
		System.out.println(cs.countSubarrays(a, k));

	}

	public  long countSubarrays(int[] nums, int k) {
		if(nums.length<k) return 0;
		int max = nums[0];
		for (int i = 1; i < nums.length; i++) {
			if (nums[i] > max)
				max = nums[i];
		}
		int count=0;
		int lowerbound, upperboud;
		int len = nums.length; // sliding window algorigthm to go througth all sub array of at least size (k)
		for (int i = len - 1; i >= k - 1; i--) {
			for (int j = i; j < len; j++) {
				lowerbound=j-i;
				upperboud=j;
				
				if(findfrequency(nums, lowerbound, upperboud, max)>=k)
				{
					count++;
				}
					
			}
		}
		return count;
	}


	
	//private method to find frequencty
	private int findfrequency(int[] arr, int lb, int ub, int max )
	{
		Map<Integer, Integer> mapfrequency=new HashMap<Integer, Integer>();
		for(int i=lb; i<=ub; i++)
		{
			if(arr[i]==max)
			{
				mapfrequency.put(arr[i], mapfrequency.getOrDefault(arr[i], 0)+1);
			}
		}
		if(!mapfrequency.containsKey(max)) return 0;
		else return mapfrequency.get(max);
		
		
	}

}
